To use GORM, those are the relevant configuration properties:

{table}
*Config key*                                                                    | *Default value*
@grails.plugin.springsecurity.rest.token.storage.useGorm@                       | @false@
@grails.plugin.springsecurity.rest.token.storage.gorm.tokenDomainClassName@     | @null@
@grails.plugin.springsecurity.rest.token.storage.gorm.tokenValuePropertyName@   | @tokenValue@
@grails.plugin.springsecurity.rest.token.storage.gorm.usernamePropertyName@     | @username@
{table}

{note}
Please note that for @tokenDomainClassName@ you must enter a fully qualified class name.
{note}

The domain class should look like this:

{code}
class AuthenticationToken {

    String tokenValue
    String username
}
{code}

{note}
In this case, instead of storing the whole @UserDetails@ object, only the username is stored. This is because applications
using this strategy will probably have the standard User and Role domain classes. Then, the username is passed to the
default @userDetailsService@ bean, which in the case of the default Spring Security Core GORM implementation will fetch
the information from the mentioned domain classes.
{note}