To use [Grails Cache|http://grails.org/plugin/cache], simply define a cache name:

{table}
*Config key*                                                            | *Default value*
@grails.plugin.springsecurity.rest.token.storage.useGrailsCache@        | @false@
@grails.plugin.springsecurity.rest.token.storage.grailsCacheName@       | @null@
{table}

The cache name should correspond to a name specified in the [cache DSL|http://grails-plugins.github.io/grails-cache/docs/manual/guide/usage.html#dsl].

{note}
*Token expiration / eviction / TTL*

By default, Spring Cache abstraction
[does not support expiration|http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/cache.html#cache-specific-config].
It depends on the specific support of the actual providers. Grails has several plugins for this:

* [Core|http://grails-plugins.github.io/grails-cache/guide/usage.html#dsl]: unsupported.
* [Ehcache|http://grails-plugins.github.io/grails-cache-ehcache/guide/usage.html#dsl]: supported.
* [Redis|http://grails-plugins.github.io/grails-cache-redis/guide/usage.html#dsl]: unsupported.
* [Gemfire|http://grails.org/plugin/cache-gemfire]: unsupported.
{note}
