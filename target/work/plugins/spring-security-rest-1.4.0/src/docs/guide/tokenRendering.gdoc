By default, this plugin renders the token in [RFC 6750 Bearer Token|http://tools.ietf.org/html/rfc6750] format:

{code}
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
    "access_token":"3bicek1gc63oai6tfjkhog4kqn8ojd6a",
    "token_type":"Bearer",
    "username": "john.doe",
    "roles": [
        "ROLE_ADMIN",
        "ROLE_USER"
    ]
}
{code}

{note}
As per the RFC, @access_token@ and @token_type@ property names cannot be customised.
{note}

The JSON structure can be customised with the following configuration keys:

{table}
*Config key*                                                                    | *Default value*
@grails.plugin.springsecurity.rest.token.rendering.usernamePropertyName@        | @username@
@grails.plugin.springsecurity.rest.token.rendering.authoritiesPropertyName@     | @roles@
{table}

Eg, with the following configuration:

{code}
grails.plugin.springsecurity.rest.token.rendering.usernamePropertyName = 'login'
grails.plugin.springsecurity.rest.token.rendering.authoritiesPropertyName = 'permissions'
{code}

The output will look like:

{code}
{
    "access_token":"3bicek1gc63oai6tfjkhog4kqn8ojd6a",
    "token_type":"Bearer",
    "login": "john.doe",
    "permissions": [
        "ROLE_ADMIN",
        "ROLE_USER"
    ]
}
{code}

h2. Disabling bearer tokens support for full response customisation

In order to fully customise the response, you need first to disable bearer tokens support by setting
@grails.plugin.springsecurity.rest.token.validation.useBearerToken = false@. That will enable you to use this additional
property:

{table}
*Config key*                                                                    | *Default value*
@grails.plugin.springsecurity.rest.token.rendering.tokenPropertyName@           | @access_token@
{table}

{warning}
Disabling bearer token support impacts the way tokens are extracted from the HTTP request. Please, read carefully
[the chapter about token validation|guide:tokenValidation] first.
{warning}

If you want your own implementation, simply create a class implementing
[RestAuthenticationTokenJsonRenderer|http://alvarosanchez.github.io/grails-spring-security-rest/docs/gapi/com/odobo/grails/plugin/springsecurity/rest/token/rendering/RestAuthenticationTokenJsonRenderer.html]
and wire it up in @resources.groovy@ with name @restAuthenticationTokenJsonRenderer@.

{note}
The principal object stored in the security context, and passed to the JSON renderer, is coming from the configured
authentication providers. In most cases, this will be a @UserDetails@ object retrieved using the @userDetailsService@ bean.
If you want to render additional information in your JSON response, you have to:
# Configure an alternative @userDetailsService@ bean that retrieves the additional information you want, and put it in a principal object.
# Configure an alternative @restAuthenticationTokenJsonRenderer@ that reads that information from the @restAuthenticationToken.principal@ object.
{note}