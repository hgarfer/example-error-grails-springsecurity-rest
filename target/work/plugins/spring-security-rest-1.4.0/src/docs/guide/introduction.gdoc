The Spring Security REST Grails plugin allows you to use Spring Security for a stateless, token-based, RESTful authentication.

{note}
This plugin depends on [Spring Security Core 2.x|http://grails-plugins.github.io/grails-spring-security-core/docs/manual/guide/newInV2.html].
Make sure your application is compatible with that version first. There is a
[feature request|https://github.com/alvarosanchez/grails-spring-security-rest/issues/15], that may be addressed in the
future if there is enough community interest / love :)
{note}

The default behaviour of Spring Security is to store the authenticated principal in the HTTP session. However, in a
RESTful scenario, we need to make sure our server is stateless.

If you are writing an API that will be used by other programs, you can use OAuth for this. But if you are exposing your API
for a front-end Javascript client to implement a
[Single Page Interface|http://www.slideshare.net/alvarosanchezmariscal/developing-spi-applications-using-grails-and-angularjs],
OAuth is not an option, specially if you want to authentication end users against your own user backend (eg: LDAP). In
this case, a token-based authentication may be a more suitable implementation, like the following:

!rest.png!

# The client application requests and endpoint that requires authentication, so the server responds with a 401 response.
# The client redirects the user to the login form.
# The user enter credentials, and the client sends a request to the authentication endpoint. The server validates credentials, and if valid, generates, stores and sends back a token to the client.
# The client then stores the token internally. It will be sent on every API method request.
# The client sends again a request to the protected resource, passing the token as an HTTP header.
# The server validates the token, and if valid, executes the actual operation requested.

As per the [REST definition|http://en.wikipedia.org/wiki/Representational_state_transfer], the client is transferring its
state on every request so the server is truly stateless. The approach to store tokens on the server is just an alternative
to use HTTP basic authentication ([see FAQ|guide:faq]) (so credentials are not passed on every request). It also helps to perform the validation
step (#5 in the diagram) faster, because the tokens, and the associated principal information may be cached. Finally,
storing tokens gives you the chance to decide about expiration strategies.

More information about this strategy can be found [on this post by James Ward|http://www.jamesward.com/2013/05/13/securing-single-page-apps-and-rest-services].

This plugin helps you to wire your existing Spring Security [authentication mechanism|guide:authentication], provides you
with ready-to-use [token generation strategies|guide:tokenGeneration] and comes prepackaged with Memcached, GORM and Grails
Cache support for [token storage|guide:tokenStorage].

h4. Release History

* 12 August 2014
** [1.4.0|https://github.com/alvarosanchez/grails-spring-security-rest/issues?q=milestone%3A1.4.0+is%3Aclosed]
* 14 July 2014
** [1.4.0.RC5|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=22&amp;state=closed]
* 4 July 2014
** [1.4.0.RC4|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=21&amp;state=closed]
* 24 June 2014
** [1.4.0.RC3|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=19&amp;state=closed]
* 24 June 2014
** [1.4.0.RC2|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=18&amp;state=closed]
* 20 June 2014
** [1.4.0.RC1|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=17&amp;state=closed]
* 11 June 2014
** [1.4.0.M3|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=16&amp;state=closed]
* 1 June 2014
** [1.4.0.M2|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=15&amp;state=closed]
* 29 May 2014
** [1.4.0.M1|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=14&amp;state=closed]
* 23 April 2014
** [1.3.4|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=13&amp;state=closed]
* 16 April 2014
** [1.3.3|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=12&amp;state=closed]
* 3 April 2014
** [1.3.2|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=11&amp;state=closed]
* 18 March 2014
** [1.3.1|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=10&amp;state=closed]
* 4 March 2014
** [1.3.0|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=9&amp;state=closed]
* 17 February 2014
** [1.2.5|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=8&amp;state=closed]
* 10 February 2014
** [1.2.4|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=7&amp;state=closed]
* 4 February 2014
** [1.2.3|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=6&amp;state=closed]
* 31 January 2014
** [1.2.2|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=5&amp;state=closed]
* 15 January 2014
** [1.2.0|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=3&amp;state=closed]
* 14 January 2014
** [1.1.0|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=2&amp;state=closed]
* 13 January 2014
** [1.0.1|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=4&amp;state=closed]
* 12 January 2014
** [1.0.0|https://github.com/alvarosanchez/grails-spring-security-rest/issues?milestone=1&amp;state=closed]
* 10 January 2014
** 1.0.0.RC2
* 31 December 2013
** Initial 1.0.0.RC1 release.